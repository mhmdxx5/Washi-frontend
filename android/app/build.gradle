apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"

// âœ… ×–×” ×™×‘×˜×™×— ×©Ö¾react-native-vector-icons fonts ×™×•×¢×ª×§×• ×‘×–×ž×Ÿ build
apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"

react {
    autolinkLibrariesWithApp()
}

def enableProguardInReleaseBuilds = false

def jscFlavor = 'io.github.react-native-community:jsc-android:2026004.+'

android {
    ndkVersion rootProject.ext.ndkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    namespace "com.carwashgasel2025"

    defaultConfig {
        applicationId "com.carwashgasel2025"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 3
        versionName "1.2"
    }

    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            if (project.hasProperty('MYAPP_UPLOAD_STORE_FILE')) {
                storeFile file(MYAPP_UPLOAD_STORE_FILE)
                storePassword MYAPP_UPLOAD_STORE_PASSWORD
                keyAlias MYAPP_UPLOAD_KEY_ALIAS
                keyPassword MYAPP_UPLOAD_KEY_PASSWORD
            }
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled enableProguardInReleaseBuilds
            shrinkResources false
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
}

dependencies {
    implementation("com.facebook.react:react-android")

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}

// âœ… ×¤×ª×¨×•×Ÿ ×œ×‘×¢×™×” ×©×œ assets_avatar.png ×‘×©×œ×‘ mergeReleaseResources
afterEvaluate {
    tasks.matching { it.name == "mergeReleaseResources" }.all {
        doFirst {
            def file = file("$buildDir/generated/res/createBundleReleaseJsAndAssets/drawable-mdpi/assets_avatar.png")
            if (file.exists()) {
                println "ðŸ§¹ Deleting problematic asset: ${file.absolutePath}"
                file.delete()
            }
        }
    }
}
